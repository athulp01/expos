alias userSP R0;
alias process_table R1;
userSP = SP;
process_table = PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1];

//switch to kernel stack
[process_table + 13] = userSP;
SP = [process_table + 11]*512 - 1;

[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1]+9] = 21;

if [SYSTEM_STATUS_TABLE + 1] != 1 || [process_table + 3] != 1 then
    [[PTBR + 2*(userSP - 1)/512]*512 + (userSP-1)%512] = -1;
    [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1]+9] = 0;
    ireturn;
endif;

//store user tabel and inode table
multipush(R0, R1, R2);
R1 = 1;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 59;
R4 = 3;
call DEVICE_MANAGER;
multipop(R0, R1, R2);

multipush(R0, R1, R2);
R1 = 1;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 60;
R4 = 4;
call DEVICE_MANAGER;
multipop(R0, R1, R2);

//store root file
multipush(R0, R1, R2);
R1 = 1;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 62;
R4 = 5;
call DEVICE_MANAGER;
multipop(R0, R1, R2);

//store disk free list
multipush(R0, R1, R2);
R1 = 1;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 61;
R4 = 2;
call DEVICE_MANAGER;
multipop(R0, R1, R2);

halt;
