alias userSP R0;
alias process_table R1;
userSP = SP;
process_table = PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1];
//switch to kernel stack
[process_table + 13] = userSP;
SP = [process_table + 11]*512 - 1;

alias filename R2;
filename = [[PTBR + 2*(userSP - 4)/512]*512 + (userSP-4)%512];

alias perm R3;
perm = [[PTBR + 2*(userSP - 3)/512]*512 + (userSP-3)%512];

alias call_num R8;
call_num = [[PTBR + 2*(userSP - 5)/512]*512 + (userSP-5)%512];

alias retcode R9;
retcode = 0;

//Create
if call_num == 1 then
    [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1]+9] = 1;
    breakpoint;
    alias fileidx R4;
    alias freeidx R5;
    freeidx = -1;
    fileidx = 0;
    while fileidx < MAX_FILE_NUM do
        if [INODE_TABLE + fileidx*16 + 1] == filename then
            retcode = 0;
            call ret;
        endif;
        if fileidx != -1 && [INODE_TABLE + fileidx*16 + 1] == -1 then
            freeidx = fileidx;
            break;
        endif;
        fileidx = fileidx + 1;
    endwhile;
    
    if fileidx == -1 then
        retcode = -1;
        call ret;
    endif;

    [INODE_TABLE + fileidx*16 + 0] = DATA;
    [INODE_TABLE + fileidx*16 + 1] = filename;
    [INODE_TABLE + fileidx*16 + 2] = 0;
    [INODE_TABLE + fileidx*16 + 3] = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1]+3];
    [INODE_TABLE + fileidx*16 + 4] = perm;
    [INODE_TABLE + fileidx*16 + 8] = -1;
    [INODE_TABLE + fileidx*16 + 9] = -1;
    [INODE_TABLE + fileidx*16 + 10] = -1;
    [INODE_TABLE + fileidx*16 + 11] = -1;
    
    [ROOT_FILE + fileidx*8 + 0] = filename;
    [ROOT_FILE + fileidx*8 + 1] = 0;
    [ROOT_FILE + fileidx*8 + 2] = DATA;
    [ROOT_FILE + fileidx*8 + 3] = [INODE_TABLE + fileidx*16 + 3];
    [ROOT_FILE + fileidx*8 + 4] = perm;
    breakpoint;
endif;

if call_num == 4 then
    [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1]+9] = 4;
    alias fileidx R4;
    fileidx = 0;
    while fileidx < MAX_FILE_NUM do
        if [INODE_TABLE + fileidx*16 + 1] == filename then
            break;
        endif;
        fileidx = fileidx + 1;
    endwhile;
    
    if fileidx == MAX_FILE_NUM then
        retcode = 0;
        call ret;
    endif;

    if [INODE_TABLE + fileidx*16] != DATA then
        retcode = -1;
        call ret;
    endif;

    if [INODE_TABLE + fileidx*16 + 4] == EXCLUSIVE then
        if [process_table + 3] != [INODE_TABLE + fileidx*16 + 3] then
            retcode = -1;
            call ret;
        endif;
    endif;

    //Acquire inode
    multipush(R0, R1, R2, R3, R4);
    R1 = 4;
    R2 = fileidx;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER;
    multipop(R0, R1, R2, R3, R4);

    //If file is already deleted
    if [FILE_STATUS_TABLE + 4*fileidx + 1] != -1 then
        multipush(R0, R1, R2, R3, R4);
        R1 = 5;
        R2 = fileidx;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call RESOURCE_MANAGER;
        multipop(R0, R1, R2, R3, R4);
        retcode = -2;
        call ret;
    endif;

    alias block R5;
    block = 0;

    while block < 4 do
        //clear the buffer
        if [INODE_TABLE + 16*fileidx + 8 + block] != -1 then
            R6 = 0;
            while R6 < MAX_BUFFER do
                if [BUFFER_TABLE + 4*R6] ==[INODE_TABLE + 16*fileidx + 8 + block] then
                    [BUFFER_TABLE + 4*R6] = 0;
                endif;
                R6 = R6 + 1;
            endwhile;
        endif;
        //release the block
        multipush(R0, R1, R2, R3, R4);
        R1 = 4;
        R2 = [INODE_TABLE + 16*fileidx + 8 + block];
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call MEMORY_MANAGER;
        multipop(R0, R1, R2, R3, R4);
        block = block + 1;
    endwhile;

    //invaludate inode table entry
    [INODE_TABLE + 16*fileidx + 1] = -1;
    //invaludate root file entry
    [ROOT_FILE + 8*fileidx ] = -1;

    breakpoint;
    //release the lcok
    multipush(R0, R1, R2, R3, R4);
    R1 = 5;
    R2 = fileidx;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER;
    multipop(R0, R1, R2, R3, R4);

endif;

ret:
[[PTBR + 2*(userSP - 1)/512]*512 + (userSP-1)%512] = retcode;
[process_table +9] = 0;
SP = [process_table + 13];
ireturn;
