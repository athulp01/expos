//process manager
alias func R1;
alias pid R2;

//Get pcb entry
if func == 1 then
    alias ptable R3;
    ptable = PROCESS_TABLE + 32;
    while ptable < PROCESS_TABLE + 16*MAX_PROC_NUM do
        if [ptable + 4] == TERMINATED then
            [ptable + 1] = (ptable - PROCESS_TABLE)/16;
            [ptable + 4] = ALLOCATED;
            [ptable + 15] = PTLR;
            [ptable + 14] = PAGE_TABLE_BASE + ((ptable - PROCESS_TABLE)/16)*20;
            R0 = (ptable - PROCESS_TABLE)/16;
            return;
        endif;
        ptable = ptable + 16;
    endwhile;
    R0 = -1;
    return;
endif;

//Free user area page
if func == 2 then
    alias rc R3;
    rc = 0;
    while (rc < 16) do
        if [[PROCESS_TABLE + 16*pid + 11]*512 + RESOURCE_TABLE_OFFSET+ rc] == SEMAPHORE then
            multipush(R1, R2, R3, R4);
            R1 = 7;
            R2 = [[PROCESS_TABLE + 16*pid + 11]*512 + RESOURCE_TABLE_OFFSET + rc + 1];
            R3 = [SYSTEM_STATUS_TABLE + 1];
            call RESOURCE_MANAGER;
            multipop(R1, R2, R3, R4);
            break;
        endif;
        rc = rc + 2;
    endwhile;
    //call release page on user area page
    multipush(R1, R2, R3);
    R1 = 2;
    R2 = [PROCESS_TABLE + pid*16 + 11];
    call MEMORY_MANAGER;
    multipop(R1, R2, R3);
    return;
endif;

//Exit process
if func == 3 then
    //free page table
    multipush(R1, R2, R3);
    R1 = 4;
    R2 = pid;
    call PROCESS_MANAGER;
    multipop(R1, R2, R3);
    
    //free user area page
    multipush(R1, R2, R3);
    R1 = 2;
    R2 = pid;
    call PROCESS_MANAGER;
    multipop(R1, R2, R3);

    if [PROCESS_TABLE + 16*pid + 9] == 9 then
        return;
    endif;

    alias ptable R3;
    ptable = PROCESS_TABLE + 16;
    while ptable < PROCESS_TABLE + 16*MAX_PROC_NUM do
        if [ptable + 4] == WAIT_PROCESS && [ptable+5] == pid then
            [ptable + 4] = READY;
        endif;
        if [ptable + 2] == pid then
            [ptable + 2] = -1;
        endif;
        ptable = ptable + 16;
    endwhile;

    [PROCESS_TABLE + 16*pid + 4] = TERMINATED;
    return;
endif;

//free page table
if func == 4 then
    //invalidate library page
    [PTBR + 0] = -1;
    [PTBR + 1] = 0000;
    [PTBR + 2] = -1;
    [PTBR + 3] = 0000;

    alias page R3;
    page = 4;
    //free all other valid pages
    while page < 20 do
        if [PTBR + page] != -1 then
            multipush(R1, R2, R3);
            R1 = 2;
            R2 = [PTBR + page];
            call MEMORY_MANAGER;
            multipop(R1, R2, R3);
        endif;
        page = page + 2;
    endwhile;
    
    //Invalidate disk map table
    alias block_num R4;
    alias disk_entry R5;
    disk_entry = 2;
    while disk_entry < 10 do
        // if heap of stack release the block
        if disk_entry < 4 && disk_entry > 7 then
            block_num = [DISK_MAP_TABLE + 10*pid + disk_entry];
            call release_block;
        endif;
        [DISK_MAP_TABLE + 10*pid + disk_entry] = -1;
        disk_entry = disk_entry + 1;
    endwhile;
    return;

release_block:
    if block_num == -1 then
        return;
    endif;
    multipush(R1, R2, R3);
    R1 = 4;
    R2 = block_num;
    R3 = pid;
    call MEMORY_MANAGER;
    multipop(R1, R2, R3);
    return;
endif;

