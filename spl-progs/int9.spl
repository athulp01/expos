//exec syscall
//change mod to exec(9)
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1]+9] = 9;

alias userSP R0;
alias process_table R1;
userSP = SP;
process_table = PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1];

//switch to kernel stack
[process_table + 13] = userSP;
SP = [process_table + 11]*512 - 1;
//get exec file name from user stack
alias file R2;
file = [[PTBR + 2*(userSP - 4)/512]*512 + (userSP-4)%512];
alias inode R3;
inode = INODE_TABLE;

//search the inode table entry for exec file
while (inode < INODE_TABLE + 16*(MAX_FILE_NUM)) do
   if file == [inode + 1] then
        //should be exec file and code page should not be zero
        if [inode] != EXEC || [inode+6] == 0 then
            [[PTBR + 2*(userSP - 1)/512]*512 + (userSP-1)%512] = -1;
            [process_table +9] = 0;
            SP = [process_table + 13];
            //exit if exec file is not valid
            ireturn;
        endif;
        break;
    endif;
    inode = inode + 16;
endwhile;

if inode >= INODE_TABLE + 16*(MAX_FILE_NUM) then
    [[PTBR + 2*(userSP - 1)/512]*512 + (userSP-1)%512] = -1;
    [process_table +9] = 0;
    SP = [process_table + 13];
    ireturn;
endif;

//call exit process
multipush(R0, R1, R2, R3);
R1 = 3;
R2 = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1]+ 1];
call PROCESS_MANAGER;
multipop(R0, R1, R2, R3);

//reclaim the user area page and switch to kernel stack
[MEMORY_FREE_LIST + [process_table + 11]] = 1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
SP = [process_table + 11]*512 - 1;

[process_table + 4] = RUNNING;
[process_table + 7] = inode;

 //Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

alias new_page R4;

//Invalidate Heap(demand paging)
[PTBR+4] = -1;
[PTBR+5] = "0000";

[PTBR+6] = -1;
[PTBR+7] = "0000";

//Load only the first code page
multipush(R0,R1, R2, R3);
//get_code_page
R1 = 5;
R2 = [inode + 8];
call MEMORY_MANAGER;
[PTBR+8] = R0;
[PTBR+9] = "0100";
multipop(R0,R1, R2, R3);

//Invalidate other code pages
[PTBR+10] = -1;
[PTBR+11] = "0000";

[PTBR+12] = -1;
[PTBR+13] = "0000";

[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
call get_new_page;
[PTBR+16] = new_page;
[PTBR+17] = "0110";

call get_new_page;
[PTBR+18] = new_page;
[PTBR+19] = "0110";

//initalize disk map table
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10 + 2] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10 + 3] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10 + 4] = [inode+8];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10 + 5] = [inode+9];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10 + 6] = [inode+10];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10 + 7] = [inode+11];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10 + 8] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10 + 9] = -1;



//initalize resource table entry
alias rc_table_entry R5;
rc_table_entry = 0;

while(rc_table_entry < 16) do
    [[process_table + 11]*512 + RESOURCE_TABLE_OFFSET + rc_table_entry] = -1;
    rc_table_entry = rc_table_entry + 1;
endwhile;

//set entry point
[process_table + 13] = 8*512;
[[PTBR+16]*512] = [[PTBR + 8]*512 + 1];
[process_table +9] = 0;
SP = [process_table + 13];
//return value
[[PTBR + 2*(userSP - 1)/512]*512 + (userSP-1)%512] = 0;
ireturn;

get_new_page:
    multipush(R0, R1, R2, R3);
    R1 = 1;
    call MEMORY_MANAGER;
    new_page = R0;
    multipop(R0, R1, R2, R3);
    return;
