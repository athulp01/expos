[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = -1;
//save the user stack pointer
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] = SP;
//switch to user area(kernel stack)
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11] * 512 - 1;
//push user registers
backup;

multipush(EIP);
if EC != 0 || [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] == PTLR*512-1 then
    if EC == 1 then
        print "INSTR_ERR";
    endif;
    if EC == 2 then
        print "MEM_ERR";
    endif;
    if EC == 3 then
        print "ARITH_ERR";
    endif;
    //don't remove this breakpoint
    breakpoint;
    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call PROCESS_MANAGER;
    call SCHEDULER;
endif;

if [SYSTEM_STATUS_TABLE + 1] == 6 then
    print "STOOOP";
    breakpoint;
endif;

if EPN > 3 && EPN < 8 then 
    alias disk_block R2;
    disk_block = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + EPN];
    multipush(EPN);
    R1 = 5;
    R2 = disk_block;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MEMORY_MANAGER;
    multipop(EPN);
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 + EPN*2] = R0;
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 + EPN*2 + 1] = "1100";
else
    alias page_num_1 R3;
    alias page_num_2 R4;

    R1 = 1;
    call MEMORY_MANAGER;
    page_num_1 = R0;
    R1 = 1;
    call MEMORY_MANAGER;
    page_num_2 = R0;

    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 + 4] = page_num_1;
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 + 5] = "1110";
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 + 6] = page_num_2;
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 + 7] = "1110";
endif;

multipop(EIP);

//restore the user registers and user SP
restore;
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

SP = SP + 1;
[[PTBR + 2*(SP/512)]*512 + (SP%512)] = EIP;
//set mode to 0
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
ireturn;
