alias userSP R0;
alias process_table R1;
userSP = SP;
process_table = PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1];
//switch to kernel stack
[process_table + 13] = userSP;
SP = [process_table + 11]*512 - 1;

alias username R2;
username = [[PTBR + 2*(userSP - 4)/512]*512 + (userSP-4)%512];

alias password R3;
password = [[PTBR + 2*(userSP - 3)/512]*512 + (userSP-3)%512];

alias retcode R9;
retcode = 0;

if [SYSTEM_STATUS_TABLE != 1] then
    retcode = -2;
    call ret;
endif;

alias userid R4;
userid = 1;

while userid < MAX_USER_NUM do
    if [USER_TABLE + 2*userid] == username then
        break;
    endif;
    userid = userid + 1;
endwhile;

if userid == MAX_USER_NUM then
    retcode = -1;
    call ret;
endif;

encrypt password;

if password != [USER_TABLE + 2*userid + 1] then
    retcode = -1;
    call ret;
endif;

[PROCESS_TABLE + 2*16 + 4] = CREATED;
[PROCESS_TABLE + 2*16 + 3] = userid;

[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 4] = WAIT_PROCESS;
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 5] = 2;

[SYSTEM_STATUS_TABLE] = userid;

multipush(R0, R1, R2, R3, R4);
call SCHEDULER;
multipop(R0, R1, R2, R3, R4);

retcode = 0;
call ret;

ret:
[[PTBR + 2*(userSP - 1)/512]*512 + (userSP-1)%512] = retcode;
[process_table +9] = 0;
SP = [process_table + 13];
ireturn;
