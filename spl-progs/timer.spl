//save the user stack pointer
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] = SP;
//switch to user area(kernel stack)
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11] * 512 - 1;
//push user registers
backup;

//If swapping is initiated
if [SYSTEM_STATUS_TABLE + 5] != 0 then
    //current process is swaper daemon
    if [SYSTEM_STATUS_TABLE + 1] == 15 then
        if [SYSTEM_STATUS_TABLE + 5] == SWAP_OUT then
            R1 = SWAP_OUT;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            call PAGER_MODULE;
        endif;
        //Swap_in
        if [SYSTEM_STATUS_TABLE + 5] == SWAP_IN then
            R1 = SWAP_IN;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            call PAGER_MODULE;
        endif;
    endif;
//Swapping is not initiated check if it needs to be initiated
else
    if [SYSTEM_STATUS_TABLE + 2] < MEM_LOW then
        [SYSTEM_STATUS_TABLE + 5] = SWAP_OUT;
    //There are swapped out process
    else 
        if [SYSTEM_STATUS_TABLE + 4] > 0 then
            alias pid R1;
            pid = 3;
            while pid < MAX_PROC_NUM - 1 do 
                if [PROCESS_TABLE + 16*pid + 4] == READY && [PROCESS_TABLE + 16*pid + 6] == 1 then
                    if [PROCESS_TABLE + 16*pid] > MAX_TICK then
                        [SYSTEM_STATUS_TABLE + 5] = SWAP_IN;
                        break;
                    endif;
                    if [SYSTEM_STATUS_TABLE + 2] > MEM_HIGH then
                        [SYSTEM_STATUS_TABLE + 5] = SWAP_IN;
                        break;
                    endif;
                endif;
                pid = pid + 1;
            endwhile;
        endif;
    endif;
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = READY;

//increase tick of all non terminated process
alias current_ptable R0;
current_ptable = PROCESS_TABLE;
while(current_ptable < 28927) do
    if([current_ptable + 4] != TERMINATED) then
        [current_ptable] = [current_ptable] + 1;
    endif;
    current_ptable = current_ptable + 16;
endwhile;

call SCHEDULER;

//restore the user registers and user SP
restore;
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
//set mode to 0
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
ireturn;
