//init
loadi(65,7);
//exit
loadi(22,35);
loadi(23,36);
//excepttion
loadi(2, 15);
loadi(3, 16);
//library
loadi(63,13);
loadi(64,14);
//timer
loadi(4, 17);
loadi(5, 18);
//write
loadi(16,29);
loadi(17,30);
//scheduler
loadi(50,63);
loadi(51,64);
//module 0
loadi(40,53);
loadi(41,54);
//module 4
loadi(48,61);
loadi(49,62);
//console interrupt
loadi(8, 21);
loadi(9, 22);
//read interrupt
loadi(14, 27);
loadi(15, 28);
//exec interrupt
loadi(20, 33);
loadi(21, 34);
//process manager
loadi(42, 55);
loadi(43, 56);
//memory manager
loadi(44, 57);
loadi(45, 58);
//inode
loadi(59 ,3);
loadi(60 ,4);
//disk interrupt
loadi(6, 19);
loadi(7, 20);
//disk free list
loadi(61, 2);
//fork
loadi(18, 31);
loadi(19, 32);
//int11
loadi(24, 37);
loadi(25, 38);
//int 13
loadi(28, 41);
loadi(29, 42);
//int14
loadi(30, 43);
loadi(31, 44);
//int15
loadi(32, 45);
loadi(33, 46);
//int4 
loadi(10, 23);
loadi(11, 24);
//root
loadi(62, 5);
//int5 
loadi(12, 25);
loadi(13, 26);
//mod3 
loadi(46, 59);
loadi(47, 60);
//int16
loadi(34, 47);
loadi(35, 48);
//int17
loadi(36, 49);
loadi(37, 50);
//int12
loadi(26, 39);
loadi(27, 40);
//shell
loadi(67, 9);
loadi(68, 10);



//set disk as free
[DISK_STATUS_TABLE] = 0;

//initalize memory free list, set all user available page to 0
alias page R1;
page = 0;
while page <= 127 do
    if page >= 81 then
        [MEMORY_FREE_LIST + page] = 0;
    else 
        [MEMORY_FREE_LIST + page] = 1;
    endif;
    page = page + 1;
endwhile;

//mem_free_count
[SYSTEM_STATUS_TABLE + 2] = 47;
//wait_mem_count
[SYSTEM_STATUS_TABLE + 3] = 0;

//init process initliazation
// Page table for init
PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 66;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

//Process table entry for init
[PROCESS_TABLE + 16 + 11] = 77;
[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 4] = CREATED;
[PROCESS_TABLE + 16 + 13] = 512*8;
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 16 + 15] = 10;

//initalize resource table of init process
alias rc_table_entry R5;
rc_table_entry = 0;

while(rc_table_entry < 16) do
    [[PROCESS_TABLE + 16 + 11]*512 + RESOURCE_TABLE_OFFSET + rc_table_entry] = -1;
    rc_table_entry = rc_table_entry + 1;
endwhile;


//entry point for init
[66*512] = [65 * 512 + 1];

//shell process initliazation
// Page table for init
PTBR = PAGE_TABLE_BASE+40;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = 68;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";

//Process table entry for shell
[PROCESS_TABLE + 2*16 + 11] = 80;
[PROCESS_TABLE + 2*16 + 1] = 2;
[PROCESS_TABLE + 2*16 + 2] = 1;
[PROCESS_TABLE + 2*16 + 4] = TERMINATED;
[PROCESS_TABLE + 2*16 + 13] = 512*8;
[PROCESS_TABLE + 2*16 + 12] = 0;
[PROCESS_TABLE + 2*16 + 14] = PAGE_TABLE_BASE + 40;
[PROCESS_TABLE + 2*16 + 15] = 10;


//initalize disk map table
[DISK_MAP_TABLE + 20 + 4] = 9;
[DISK_MAP_TABLE + 20 + 5] = 10;

//entry point for shell
[78*512] = [67 * 512 + 1];
//change process status of all other process to TERMINATED
alias state_field R0;
state_field = PROCESS_TABLE + 32 + 4;
while (state_field <= 28927) do
    [state_field] = TERMINATED;
    state_field = state_field + 16;
endwhile;

PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

alias sem_table R2;
sem_table = 0;

while sem_table < MAX_SEM_COUNT do
    [SEMAPHORE_TABLE + sem_table*4] = -1;
    [SEMAPHORE_TABLE + sem_table*4 + 1] = 0;
    sem_table = sem_table + 1;
endwhile;

//set terminal free
[TERMINAL_STATUS_TABLE] = 0;

alias file_table R3;
file_table = 0;

while file_table < MAX_FILE_NUM do
    [FILE_STATUS_TABLE +4*file_table] = -1;
    [FILE_STATUS_TABLE +4*file_table +1] = -1;
    file_table = file_table + 1;
endwhile;

alias buffer_table R3;
buffer_table = 0;
while buffer_table < MAX_BUFFER do
    [BUFFER_TABLE + 4*buffer_table + 0] = -1;
    [BUFFER_TABLE + 4*buffer_table + 1] = 0;
    [BUFFER_TABLE + 4*buffer_table + 2] = -1;
    buffer_table = buffer_table + 1;
endwhile;

alias file_table R3;
file_table = 0;
while file_table < MAX_OPENFILE_NUM do 
    [OPEN_FILE_TABLE + 4*file_table] = -1;
    [OPEN_FILE_TABLE + 4*file_table + 1] = -1;
    [OPEN_FILE_TABLE + 4*file_table + 2] = -1;
    [OPEN_FILE_TABLE + 4*file_table + 3] = -1;
    file_table = file_table + 1;
endwhile;

[PROCESS_TABLE + 16 + 3] = 1;

//return to os startup code
return;
