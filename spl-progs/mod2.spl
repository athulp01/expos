alias func R1;
alias page R2;

//get free page
if func == 1 then
    //increment the wait_mem_count and go to busy loop
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
    while [SYSTEM_STATUS_TABLE + 2] == 0 do
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] + 4] = WAIT_MEM;
        call SCHEDULER;
    endwhile;
    //decrement both wait_mem_count and mem_free_count
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
    //effective free pool start from 83 because of idle nad init proces
    page = 83;
    //search memory free list and return
    while page <= 127 do
        if [MEMORY_FREE_LIST + page] == 0 then
            [MEMORY_FREE_LIST + page] = 1;
            R0 = page;
            return;
        endif;
        page = page + 1;
    endwhile;
    return;
endif;

//Release page
if func == 2 then
    //decrement corresponding free list
    [MEMORY_FREE_LIST + R2] = [MEMORY_FREE_LIST + R2] - 1;
    //if the last proces whihc uses this page
    if [MEMORY_FREE_LIST + R2] == 0 then
        //increment mem_free_count
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
        page = 0;
        //wake all process in WAIT_MEM
        while page < MAX_PROC_NUM do
            if [PROCESS_TABLE + 16*page + 4] == WAIT_MEM then
                [PROCESS_TABLE + 16*page + 4] = READY;
            endif;
            page = page + 1;
        endwhile;
    endif;
    return;
endif;
