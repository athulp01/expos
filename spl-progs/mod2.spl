//MEMORY_MANAGER
alias func R1;

//get free page
if func == 1 then
    alias page R2;
    //increment the wait_mem_count and go to busy loop
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
    while [SYSTEM_STATUS_TABLE + 2] == 0 do
        print "no memory";
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_MEM;
        call SCHEDULER;
    endwhile;
    //decrement both wait_mem_count and mem_free_count
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
    //effective free pool start from 83 because of idle nad init proces
    page = 83;
    //search memory free list and return
    while page <= 127 do
        if [MEMORY_FREE_LIST + page] == 0 then
            [MEMORY_FREE_LIST + page] = 1;
            R0 = page;
            return;
        endif;
        page = page + 1;
    endwhile;
    return;
endif;

//Release page
if func == 2 then
    alias page R2;
    //decrement corresponding free list
    [MEMORY_FREE_LIST + R2] = [MEMORY_FREE_LIST + R2] - 1;
    //if the last proces whihc uses this page
    if [MEMORY_FREE_LIST + R2] == 0 then
        //increment mem_free_count
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
        page = 0;
        //wake all process in WAIT_MEM
        while page < MAX_PROC_NUM do
            if [PROCESS_TABLE + 16*page + 4] == WAIT_MEM then
                [PROCESS_TABLE + 16*page + 4] = READY;
            endif;
            page = page + 1;
        endwhile;
    endif;
    return;
endif;

//get free block
if func == 3 then
    alias block R2;
    block = DISK_FREE_AREA;

    while block != DISK_SWAP_AREA do
        if [DISK_FREE_LIST + block] == 0 then
            [DISK_FREE_LIST + block] = 1;
            R0 = block;
            return;
        endif;
        block = block + 1;
    endwhile;
    R0 = -1;
    return;
endif;

//release block
if func == 4 then
    alias block_num R2;
    alias pid R3;
    [DISK_FREE_LIST + block_num] = [DISK_FREE_LIST + block_num] - 1;
    return;
endif;
    
//get code page
if func == 5 then
    alias block_num R2;
    alias pid R3;
    alias code_page R4;
    pid = 1;
    //Search disk map table of all proces
    while pid < MAX_PROC_NUM do
        code_page = 4;
        //search all code pages of that process
        while code_page <= 7 do
            //if the same block is loaded by another process
            if [DISK_MAP_TABLE + 10*pid + code_page] == block_num then
                //if code block found, check if in memory
                if [PAGE_TABLE_BASE + 20*pid + 2*code_page] != -1 then
                    //if so return and increment memory free list
                    R0 = [PAGE_TABLE_BASE + 20*pid + 2*code_page];
                    [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
                    return;
                endif;
            endif;
            code_page = code_page + 1;
        endwhile;
        pid = pid + 1;
    endwhile;
    // allocate a new page and load the block 
    alias page_num R5;
    multipush(R1, R2, R3, R4);
    //get_free_page
    R1 = 1;
    R2 = block_num;
    call MEMORY_MANAGER;
    multipop(R1, R2, R3, R4);
    page_num = R0;

    multipush(R1, R2, R3, R4, R5);
    //disk load
    R1 = 2;
    R4 = block_num;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = page_num;
    call DEVICE_MANAGER;
    multipop(R1, R2, R3, R4, R5);
    //return loaded page number
    R0 = page_num;
    return;
endif;

if func == 6 then
	alias disk R3;
	disk = DISK_SWAP_AREA;
	while(disk < DISK_SIZE) do
		if([DISK_FREE_LIST + disk] == 0) then
			[DISK_FREE_LIST + disk] = 1;
			R0 = disk;
			return;
		endif;
		disk = disk + 1;
	endwhile;
	
	R0 = -1;
	return;
endif;
